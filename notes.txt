switch tcp congestion control algorithm to reno:
    echo reno | sudo tee /proc/sys/net/ipv4/tcp_congestion_control


lab report within 1 week, sections 10-14, one single submission per group,
    groups will be created for us on canvas



production 192.168.0.16/29

netmask 255 255 255 11111000

PRO1 192.168.0.18

=============

6

rtfm.mit.edu = 19
acs.ucalgary.ca = 24
www.yahoo.se = 14
210.155.130.190 = weird loop, ttl exceeded on ping

traceroute -m 10 -q 2 -p 80 www.nada.kth.se

8.6a)
16 packets in total, 10 if excluding the ttcp extra packets

8.6b)
10 420 bytes in total, including protocol headers

8.6c)
10 000 bytes of user data

8.6d)
None of the UDP header fields change

8.6e)
the TA-host used port 53088

9.2a)
1472 bytes

9.2b)
1472 + 20 (ipv4) + 8 (udp) = 1500

9.2c)
65507 bytes

9.2d)
65507 + 20 (ipv4) + 8 (udp) = 2^16 - 1


10.7a)
15 packets in total (using "reno" on both computers)

10.7b)
(relative sequence numbers here, must be mentioned in report)
0, 1, 1001, 2449, 5345, 6793, 10002
[0-10002]

10.7c)
10 packets do not carry a payload

10.7d)
11 006 bytes total
10 000 bytes of user data

10.7e)
UDP is more efficient in terms of overhead

In this case:
    UDP has an efficiency of 95.97%
    TCP has an efficiency of 90.86%

11.1.6a)
the first three packets

SYN in the first packet (A->B)
SYN and ACK in the second packet (B->A)
ACK in the third packet (A->B)

11.1.6b)
[both] initial sequence number (relative) = 0

[client/host A] initial sequence number (absolute) = 2 368 580 297
[server/host B] initial sequence number (absolute) = 2 235 071 071

11.1.6c)
the fourth packet carries 27 bytes of telnet data

11.1.6.d)
[client/host A] 29200
[server/host B] 28960

11.1.6.e)
roughly 1.8 milliseconds

11.1.7.a)
the last three packets are involved in the connection termination

11.1.7.b)
 first packet [A->B]: FIN/ACK
second packet [B->A]: FIN/ACK
 third packet [A->B]: ACK

11.2.5.a)
the server replies to the clients initial SYN with an RST/ACK

11.2.5.b)
the connection is closed immediately (less than one millisecond)

12.1.4.a)
three segments per typed character can be seen

12.1.4.b)
the payload consists of the single typed character
both for the client->server and the server->client packets

12.1.4.c)
we see only three packets because the ACK from server->client is
piggybacked onto the server->client character echo

12.1.4.d)
the delay is because of the delayed ack algorithm
the delay is approximately 150 milliseconds

12.1.4.e)
client: 245
server: 227

does not vary

12.1.5.a)
when typing quickly enough, multiple characters are sent in single packets

12.2.5.a)
the rule (according to a TA) is that the receiver waits for some time to
accumulate received data and then ACKs it. in our data it is really difficult
to see any rule.

12.2.5.b)
it scales with the window size, we'll look at the data later TODO

12.2.5.c)
it increases

12.2.5.d)
sent 116841 0.01274
ack 116841 0.01526

12.2.5.e)
no (window ~100k, sent ~1448 bytes) TODO
